/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package rentalapp;

import controller.MobilController;
import controller.PelangganController;
import controller.PenyewaanController;
import controller.SopirController;
import java.text.NumberFormat;
import java.util.List;
import java.util.Locale;
import javax.swing.table.DefaultTableModel;
import model.Mobil;
import model.Pelanggan;
import model.Penyewaan;
import model.Sopir;
import utils.DateUtil;

/**
 *
 * @author ThinkPad
 */
public class DialogPenyewaan extends javax.swing.JDialog {

    private MobilController mobilController;
    private PelangganController pelangganController;
    private SopirController sopirController;
    private PenyewaanController penyewaanController;

    /**
     * Creates new form DialogMobil
     */
    public DialogPenyewaan(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        mobilController = new MobilController();
        pelangganController = new PelangganController();
        sopirController = new SopirController();
        penyewaanController = new PenyewaanController();

        loadTable();
    }

    private void loadTable() {
        // Create table model
        String[] columns = {"ID Sewa", "Pelanggan", "Mobil", "Sopir", "Tgl Sewa", "Tgl Kembali", "Total Harga",
            "Status"};
        DefaultTableModel model = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        // Get data from controller
        List<Penyewaan> penyewaanList = penyewaanController.getActivePenyewaan();

        // Use DateUtil for formatting dates
        // No need to create a SimpleDateFormat instance
        // Format for currency
        NumberFormat currencyFormat = NumberFormat
                .getCurrencyInstance(new Locale.Builder().setLanguage("id").setRegion("ID").build());
        currencyFormat.setMaximumFractionDigits(0);

        // Add data to model
        for (Penyewaan penyewaan : penyewaanList) {
            // Get pelanggan name
            Pelanggan pelanggan = pelangganController.getPelangganById(penyewaan.getIdPelanggan());
            String pelangganName = (pelanggan != null) ? pelanggan.getNama() : "-";

            // Get mobil info
            Mobil mobil = mobilController.getMobilById(penyewaan.getIdMobil());
            String mobilInfo = (mobil != null) ? mobil.getMerk() + " (" + mobil.getNoPolisi() + ")" : "-";

            // Get sopir name
            String sopirName = "-";
            if (penyewaan.getIdSopir() != null) {
                Sopir sopir = sopirController.getSopirById(penyewaan.getIdSopir());
                if (sopir != null) {
                    sopirName = sopir.getNama();
                }
            }

            Object[] row = {
                penyewaan.getIdSewa(),
                pelangganName,
                mobilInfo,
                sopirName,
                DateUtil.formatTanggal(penyewaan.getTglSewa()),
                DateUtil.formatTanggal(penyewaan.getTglKembaliRencana()),
                currencyFormat.format(penyewaan.getTotalHarga()),
                penyewaan.getStatus()
            };
            model.addRow(row);
        }

        // Set model to table
        table.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        textcari = new javax.swing.JTextField();
        btncari = new javax.swing.JButton();
        btnrefresh1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        btncari.setText("Cari");
        btncari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncariActionPerformed(evt);
            }
        });

        btnrefresh1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/refresh.png"))); // NOI18N
        btnrefresh1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrefresh1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(textcari, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btncari)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnrefresh1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 793, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btncari)
                            .addComponent(textcari)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnrefresh1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnrefresh1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrefresh1ActionPerformed
        loadTable();
    }//GEN-LAST:event_btnrefresh1ActionPerformed

    private void btncariActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btncariActionPerformed
        String keyword = textcari.getText().trim().toLowerCase();

        if (keyword.isEmpty()) {
            loadTable(); // If search field is empty, load all data
            return;
        }

        // Create table model with the same columns as in loadTable
        String[] columns = {"ID Sewa", "Pelanggan", "Mobil", "Sopir", "Tgl Sewa", "Tgl Kembali", "Total Harga",
            "Status"};
        DefaultTableModel model = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        // Get all penyewaan data
        List<Penyewaan> penyewaanList = penyewaanController.getActivePenyewaan();

        // Format for currency
        NumberFormat currencyFormat = NumberFormat
                .getCurrencyInstance(new Locale.Builder().setLanguage("id").setRegion("ID").build());
        currencyFormat.setMaximumFractionDigits(0);

        // Filter and add data to model
        for (Penyewaan penyewaan : penyewaanList) {
            // Get related data for searching
            Pelanggan pelanggan = pelangganController.getPelangganById(penyewaan.getIdPelanggan());
            String pelangganName = (pelanggan != null) ? pelanggan.getNama() : "-";

            Mobil mobil = mobilController.getMobilById(penyewaan.getIdMobil());
            String mobilMerk = (mobil != null) ? mobil.getMerk() : "-";
            String noPolisi = (mobil != null) ? mobil.getNoPolisi() : "-";
            String mobilInfo = mobilMerk + " (" + noPolisi + ")";

            String sopirName = "-";
            if (penyewaan.getIdSopir() != null) {
                Sopir sopir = sopirController.getSopirById(penyewaan.getIdSopir());
                if (sopir != null) {
                    sopirName = sopir.getNama();
                }
            }

            String tglSewa = DateUtil.formatTanggal(penyewaan.getTglSewa());
            String tglKembali = DateUtil.formatTanggal(penyewaan.getTglKembaliRencana());
            String totalHargaStr = currencyFormat.format(penyewaan.getTotalHarga());
            String status = penyewaan.getStatus();

            // Check if any of these fields match the search keyword
            if (String.valueOf(penyewaan.getIdSewa()).contains(keyword)
                    || pelangganName.toLowerCase().contains(keyword)
                    || mobilMerk.toLowerCase().contains(keyword)
                    || noPolisi.toLowerCase().contains(keyword)
                    || sopirName.toLowerCase().contains(keyword)
                    || tglSewa.toLowerCase().contains(keyword)
                    || tglKembali.toLowerCase().contains(keyword)
                    || totalHargaStr.toLowerCase().contains(keyword)
                    || status.toLowerCase().contains(keyword)) {

                Object[] row = {
                    penyewaan.getIdSewa(),
                    pelangganName,
                    mobilInfo,
                    sopirName,
                    tglSewa,
                    tglKembali,
                    totalHargaStr,
                    status
                };
                model.addRow(row);
            }
        }

        // Set filtered model to table
        table.setModel(model);

        // Display message if no results found
        if (model.getRowCount() == 0) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Tidak ada data penyewaan yang cocok dengan kata kunci: " + keyword,
                    "Hasil Pencarian", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }// GEN-LAST:event_btncariActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_tableMouseClicked
        if (evt.getClickCount() == 2) {
            tableDoubleClicked();
        }
    }// GEN-LAST:event_tableMouseClicked

    // Interface to handle selection
    public interface PenyewaanSelectListener {

        void onPenyewaanSelected(int idPenyewaan);
    }

    private PenyewaanSelectListener listener;
    private int selectedId = -1;

    // Method to set the listener
    public void setPenyewaanSelectListener(PenyewaanSelectListener listener) {
        this.listener = listener;
    }

    // Handle double click on table
    private void tableDoubleClicked() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            selectedId = (int) table.getValueAt(selectedRow, 0); // Get ID from first column
            if (listener != null) {
                listener.onPenyewaanSelected(selectedId);
            }
            setVisible(false); // Close dialog after selection
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogPenyewaan.class.getName()).log(java.util.logging.Level.SEVERE,
                    null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogPenyewaan.class.getName()).log(java.util.logging.Level.SEVERE,
                    null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogPenyewaan.class.getName()).log(java.util.logging.Level.SEVERE,
                    null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogPenyewaan.class.getName()).log(java.util.logging.Level.SEVERE,
                    null,
                    ex);
        }

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialogPenyewaan dialog = new DialogPenyewaan(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Getter methods for accessing components
    public javax.swing.JTable getTable() {
        return table;
    }

    public javax.swing.JTextField getTextCari() {
        return textcari;
    }

    public javax.swing.JButton getBtnCari() {
        return btncari;
    }

    // Getter for the selected ID
    public int getSelectedPenyewaanId() {
        return selectedId;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btncari;
    private javax.swing.JButton btnrefresh1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JTextField textcari;
    // End of variables declaration//GEN-END:variables
}
